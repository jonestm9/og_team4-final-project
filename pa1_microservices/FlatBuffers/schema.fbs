// For our assignment, we will be defining some application-level
// message formats, just like HTTP has GET, PUT, POST etc. 
//
// We have to define a namespace under which this schema gets
// translated to the programming language we are using.
// Let us call it CustomAppProto

namespace CustomAppProto;

enum DispenserOptions: byte
{
   OPTIMAL,
   PARTIAL,
   BLOCKAGE
}

enum LightStatus: byte
{
   GOOD,
   BAD
}

enum SensorStatus: byte
{
   GOOD,
   BAD
}

table HealthBody {
   dispenser: DispenserOptions;
   icemaker: int32;
   lightbulb: LightStatus;
   fridge_temp: int32;
   freezer_temp: int32;
   sensor_status: SensorStatus;
   humidity: double;
   door_openings: uint32;
}

table VeggieOrder {
   tomato: double;
   cucumber: double;
   eggplant: double;
   broccoli: double;
   carrot: double;
   onion: double;
}

table CanOrder {
   coke: uint32;
   pepsi: uint32;
   coors: uint32;
}


table BottleOrder {
   sprite: uint32;
   rootbeer: uint32;
   fanta: uint32;
}


table CansAndBottles {
    cans: CanOrder;
    bottles: BottleOrder;
}

enum MilkType: byte {
    OnePercent,
    TwoPercent,
    FatFree,
    Whole,
    Almond,
    Cashew,
    Oat,
}

table Milk {
    type: MilkType;
    quantity: double;
}

enum BreadType: byte {
    WholeWheat,
    Pumpernickel,
    Rye,
    White,
    Sourdough,
}

table Bread {
    type: BreadType;
    quantity: int;
}

enum MeatType: byte {
   GroundBeef,
   Chicken,
   Turkey,
   Ham,
   Pork,
   Steak,
}

table Meat {
   type: MeatType;
   quantity: double;
}


table OrderBody {
   veggies: VeggieOrder;
   drinks: CansAndBottles;
   milk: [Milk];
   bread: [Bread];
   meat: [Meat];
}



enum RequestStatus: byte
{
   OK,
   BAD_REQUEST
}

enum ResponseType: byte {
   ORDER_PLACED,
   YOU_ARE_HEALTHY,
   BAD_REQUEST
}

table ResponseBody {
   code: RequestStatus;
   contents: ResponseType; 
}


union msgBody 
{
   HealthBody,
   OrderBody,
   ResponseBody
}


enum Types: byte 
{
   HEALTH,
   ORDER,
   RESPONSE
}

table Master
{
   type: Types;      // say this is some descriptive string
   ts: double;       // say this is the timestamp
   body: msgBody;
}

// indicate what is the top level structure from where the serialization starts.
// The reason we need this is because we may have a very complicated nested
// data structure and so we need to tell the compiler the starting point.

root_type Master;
